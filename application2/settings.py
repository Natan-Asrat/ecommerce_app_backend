"""
Django settings for application2 project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-b3ul3!0ob3a!)@5r7dqy65#lh_mea)ovbqm5g94oi0g+8tt#rf'

# SECURITY WARNING: don't run with debug turned on in production!
import os
DEBUG = os.environ.get('DEBUG') == 'true' if os.environ.get('DEBUG') else False
ADS_INITIAL_POSITION = int(os.environ.get('ADS_INITIAL_POSITION', 2)) 
INTERVAL_BETWEEN_ADS = int(os.environ.get('INTERVAL_BETWEEN_ADS', 3))

NEW_POST_RECOMMENDATION_LIMIT = int(os.environ.get('NEW_POST_RECOMMENDATION_LIMIT', 30))
FOLLOWING_BASED_RECOMMENDATION_LIMIT = int(os.environ.get('FOLLOWING_BASED_RECOMMENDATION_LIMIT', 35))
CATEGORY_BASED_RECOMMENDATION_LIMIT = int(os.environ.get('CATEGORY_BASED_RECOMMENDATION_LIMIT', 5))
IICF_RECOMMENDATION_LIMIT = int(os.environ.get('IICF_RECOMMENDATION_LIMIT', 45))
UUCF_RECOMMENDATION_LIMIT = int(os.environ.get('UUCF_RECOMMENDATION_LIMIT', 20))
UCCF_RECOMMENDATION_LIMIT = int(os.environ.get('UCCF_RECOMMENDATION_LIMIT', 15))
RECOMMENDATION_LIMIT = int(os.environ.get('RECOMMENDATION_LIMIT', 25))
POSTS_INITIAL_IICF = int(os.environ.get('POSTS_INITIAL_IICF', 5))
USERS_INITIAL_IICF = int(os.environ.get('USERS_INITIAL_IICF', 20))

USERS_INITIAL_UUCF = int(os.environ.get('USERS_INITIAL_UUCF', 20))

CATEGORIES_INITIAL_UCCF = int(os.environ.get('CATEGORIES_INITIAL_UCCF', 5))
SELLERS_INITIAL_UCCF = int(os.environ.get('SELLERS_INITIAL_UCCF', 20))

FOLLOWING_INITIAL_FOLLOWING = int(os.environ.get('FOLLOWING_INITIAL_FOLLOWING', 50))

CATEGORY_REDUCER_CONSTANT = int(os.environ.get('CATEGORY_REDUCER_CONSTANT', 100))
USER_REDUCER_CONSTANT = int(os.environ.get('USER_REDUCER_CONSTANT', 10))


ALLOWED_HOSTS = ['.vercel.app', '.now.sh', '.onrender.com', 
                 '127.0.0.1'
                 ]
import dotenv
dotenv.read_dotenv()

FIREBASE_ACCOUNT_TYPE = os.environ.get('FIREBASE_ACCOUNT_TYPE')
FIREBASE_PROJECT_ID = os.environ.get('FIREBASE_PROJECT_ID')
FIREBASE_PRIVATE_KEY_ID = os.environ.get('FIREBASE_PRIVATE_KEY_ID')
FIREBASE_PRIVATE_KEY = os.environ.get('FIREBASE_PRIVATE_KEY')
FIREBASE_CLIENT_EMAIL = os.environ.get('FIREBASE_CLIENT_EMAIL')
FIREBASE_CLIENT_ID = os.environ.get('FIREBASE_CLIENT_ID')
FIREBASE_AUTH_URI = os.environ.get('FIREBASE_AUTH_URI')
FIREBASE_TOKEN_URI = os.environ.get('FIREBASE_TOKEN_URI')
FIREBASE_AUTH_PROVIDER_X509_CERT_URL = os.environ.get('FIREBASE_AUTH_PROVIDER_X509_CERT_URL')
FIREBASE_CLIENT_X509_CERT_URL = os.environ.get('FIREBASE_CLIENT_X509_CERT_URL')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'posts.apps.PostsConfig',
    'debug_toolbar',
    # 'whitenoise.runserver_nostatic'
]
INTERNAL_IPS = [
    '127.0.0.1',
]
MIDDLEWARE = [
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'application2.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'application2.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'application2',
        'USER': 'postgres',
        'PASSWORD': 'nats',
        'HOST': 'localhost',
        'PORT': '5433'
    }
}
# DATABASE_ENGINE = os.environ.get('DATABASE_ENGINE')
# DATABASE_NAME = os.environ.get('POSTGRES_DATABASE')
# DATABASE_USER = os.environ.get('POSTGRES_USER')
# DATABASE_PASSWORD = os.environ.get('POSTGRES_PASSWORD')
# DATABASE_HOST = os.environ.get('POSTGRES_HOST')
# DATABASE_PORT = os.environ.get('DATABASE_PORT')

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': DATABASE_NAME,
#         'USER': DATABASE_USER,
#         'PASSWORD': DATABASE_PASSWORD,
#         'HOST': DATABASE_HOST,
#         'PORT': DATABASE_PORT
#     }
    
# }
# import dj_database_url
# DATABASES['default'] = dj_database_url.parse(os.environ.get('DATABASE_LINK'))
# CONN_MAX_AGE = None
AUTH_USER_MODEL = 'posts.User'
# from neomodel import config
# config.DATABASE_URL = 'bolt://neo4j:12345678@localhost:7687/application2'
# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# DEBUG_TOOLBAR_PANELS = [
#     'debug_toolbar.panels.profiling.ProfilingPanel'
# ]

import cloudinary
          
cloudinary.config( 
  cloud_name = "dgyblgiuq", 
  api_key = "326714553129399", 
  api_secret = "CozE8QQIhyXS0I8WroOXIgnPVVc" ,
  secure = True
)

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'posts.authentication.FirebaseAuthentication',
        'django.contrib.auth.backends.ModelBackend',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication'
    ]
}